import {
  Select,
  Button,
  Flex,
  Box,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Heading,
  Checkbox,
} from "@chakra-ui/react";
import Head from "next/head";
import { Inter } from "next/font/google";
import { FaRandom, FaCog } from "react-icons/fa";
import { useState, useRef } from "react";
import axios from "axios";
import qs from "qs";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [target, setTarget] = useState("");
  const [action, setAction] = useState("");
  const [destination, setDestination] = useState("未選択");
  const [customDestination, setCustomDestination] = useState("");
  const [length, setLength] = useState("普通");
  const [breakLine, setBreakLine] = useState(false);
  const [message, setMessage] = useState("");
  const [additionalCnt, setAdditionalCnt] = useState(0);
  const [additionalItems, setAdditionalItems] = useState<string[]>([]);

  const initialRef = useRef(null);

  const options = {
    target: [
      { value: "親", label: "親が" },
      { value: "親戚", label: "親戚が" },
      { value: "ペット", label: "ペットが" },
      { value: "電車", label: "電車が" },
    ],
    action: [
      { value: "熱", label: "熱" },
      { value: "遅延", label: "遅延" },
      { value: "故障", label: "故障" },
      { value: "トラブル", label: "トラブル" },
      { value: "忘れた", label: "忘れた" },
    ],
    destination: [
      { value: "未選択", label: "未選択" },
      { value: "先生", label: "先生" },
      { value: "上司", label: "上司" },
      { value: "取引先", label: "取引先" },
      { value: "同僚", label: "同僚" },
      { value: "友達", label: "友達" },
      { value: "その他", label: "その他" },
    ],
    length: [
      { value: "30", label: "短文" },
      { value: "60", label: "普通" },
      { value: "100", label: "長文" },
      { value: "200", label: "超長文" },
    ],
  };

  const handleOpenModal = () => setIsModalOpen(true);
  const handleCloseModal = () => setIsModalOpen(false);

  const handleTargetChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setTarget(event.target.value);
  };

  const handleActionChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setAction(event.target.value);
  };

  const handleDestinationChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setDestination(event.target.value);
  };

  const handleLengthChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    setLength(event.target.value);
  };

  const handleRandomClick = (type: "target" | "action") => {
    const randomIndex = Math.floor(Math.random() * options[type].length);
    if (type === "target") {
      setTarget(options[type][randomIndex].value);
    } else if (type === "action") {
      setAction(options[type][randomIndex].value);
    }
  };

  const handleGenerateClick = () => {
    if (target === "" || action === "") return;

    const queryParams = {
      target: target,
      action: action,
      destination: destination == "入力" ? customDestination : destination,
      length: length,
      breakLine: breakLine,
    };

    let count = 0;
    let dots = "";

    const intervalId = setInterval(() => {
      count = (count + 1) % 6;
      dots = ".".repeat(count);
      setMessage(`生成中${dots}`);
    }, 500);

    axios
      .get(`/api/generate?${qs.stringify(queryParams)}`)
      .then((response) => {
        setMessage(response.data.message);
        clearInterval(intervalId);
      })
      .catch((error) => {
        console.error(error);
      });
  };

  const handleAddItem = () => {
    setAdditionalItems([...additionalItems, ""]);
  };

  return (
    <>
      <Head>
        <title>Chikoku Generator</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex flexDirection="column" height="100vh">
        <Flex justifyContent="center" alignItems="center" height="40vh">
          <Heading>Chikoku Generator</Heading>
        </Flex>
        <Flex justifyContent="center" height="60vh">
          <main style={{ maxWidth: "600px" }}>
            {message ? (
              <Box m="4">
                <Flex flexDirection="column" alignItems={"center"}>
                  <Box mb="4" dangerouslySetInnerHTML={{ __html: message.replace(/\n/g, "<br>") }}></Box>
                  <Button
                    onClick={() => {
                      setMessage("");
                    }}
                  >
                    戻る
                  </Button>
                </Flex>
              </Box>
            ) : (
              <>
                <Flex flexDirection={["column", "row"]}>
                  <Box flex="1" mr={["0", "2"]}>
                    <Flex gap="2">
                      <Select placeholder="未選択" value={target} onChange={handleTargetChange}>
                        {options.target.map((target) => (
                          <option key={target.value} value={target.value}>
                            {target.label}
                          </option>
                        ))}
                      </Select>
                      <Button onClick={() => handleRandomClick("target")}>
                        <FaRandom />
                      </Button>
                    </Flex>
                  </Box>
                  <Box display="flex" justifyContent="center" alignItems="center">
                    X
                  </Box>
                  <Box flex="1" ml={["0", "2"]}>
                    <Flex gap="2">
                      <Select placeholder="未選択" value={action} onChange={handleActionChange}>
                        {options.action.map((action) => (
                          <option key={action.value} value={action.value}>
                            {action.label}
                          </option>
                        ))}
                      </Select>
                      <Button onClick={() => handleRandomClick("action")}>
                        <FaRandom />
                      </Button>
                    </Flex>
                  </Box>
                  {/* <Button onClick={handleAddItem}>追加</Button> */}
                </Flex>
                {/* {additionalItems.map((item, index) => (
                  <Flex key={index}>
                    <Select
                      value={item}
                      onChange={(e) => {
                        const items = [...additionalItems];
                        items[index] = e.target.value;
                        setAdditionalItems(items);
                      }}
                    ></Select>
                  </Flex>
                ))} */}

                <Flex justify="center" mt="4" gap="2">
                  <Button colorScheme="blue" onClick={handleGenerateClick}>
                    生成
                  </Button>
                  <Button onClick={handleOpenModal}>
                    <FaCog />
                  </Button>
                  <Modal isOpen={isModalOpen} onClose={handleCloseModal} initialFocusRef={initialRef}>
                    <ModalOverlay />
                    <ModalContent ref={initialRef}>
                      <ModalHeader>設定</ModalHeader>
                      <ModalBody>
                        <Flex flexDirection="column" alignItems="center">
                          <Box mb="4">
                            <Flex>
                              <Flex mr="2" alignItems="center">
                                送り先:
                              </Flex>
                              <Box flex="1" mr="2">
                                <Select value={destination} onChange={handleDestinationChange}>
                                  {options.destination.map((destination) => (
                                    <option key={destination.value} value={destination.value}>
                                      {destination.label}
                                    </option>
                                  ))}
                                  <option value="入力">入力</option>
                                </Select>
                              </Box>
                            </Flex>
                          </Box>
                          {destination === "入力" && (
                            <Box mb="4">
                              <input
                                type="text"
                                placeholder="入力欄"
                                value={customDestination}
                                onChange={(e) => setCustomDestination(e.target.value)}
                              />
                            </Box>
                          )}
                          <Box mb="4">
                            <Flex>
                              <Flex mr="2" alignItems="center">
                                長さ:
                              </Flex>
                              <Box>
                                <Select value={length} onChange={handleLengthChange}>
                                  {options.length.map((length) => (
                                    <option key={length.value} value={length.value}>
                                      {length.label}
                                    </option>
                                  ))}
                                </Select>
                              </Box>
                            </Flex>
                          </Box>
                          <Box mb="4">
                            <Flex alignItems="center">
                              <Checkbox isChecked={breakLine} onChange={(e) => setBreakLine(e.target.checked)}>
                                改行する
                              </Checkbox>
                            </Flex>
                          </Box>
                        </Flex>
                      </ModalBody>
                      <ModalFooter>
                        <Button colorScheme="blue" onClick={handleCloseModal}>
                          閉じる
                        </Button>
                      </ModalFooter>
                    </ModalContent>
                  </Modal>
                </Flex>
              </>
            )}
          </main>
        </Flex>
      </Flex>
    </>
  );
}
